
==================== FINAL INTERFACE ====================
2017-04-03 14:35:37.878077 UTC

interface GoblinBurner-0.1.0.0-I1JAjz4cEJL8vh9rdrHCnV:Mannager 8002
  interface hash: d9b903a4405dae85d50073fcefa0745a
  ABI hash: 4d907149783aeeab118bd555a252d4ca
  export-list hash: f15d8a7727703f68e058c478376c3646
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Mannager.aleatory_dice
  Mannager.characterListModify
  Mannager.characterModify
  Mannager.character_creation
  Mannager.commGenerator
  Mannager.conModCheck
  Mannager.depAttrCalculator
  Mannager.diceToNum
  Mannager.dices_thrower
  Mannager.envModify
  Mannager.evalBoolExp
  Mannager.evalComm
  Mannager.evalIntExp
  Mannager.initState
  Mannager.isIn
  Mannager.length'
  Mannager.lookAndReplace
  Mannager.modifiers
  Mannager.modifiersExecute
  Mannager.nth
  Mannager.replaceAllComm
  Mannager.replaceAllInt
  Mannager.replaceAllbool
  Mannager.roll
  Mannager.skilatr_thrower
  Mannager.skillCalculator
  Mannager.system_depurator
  Mannager.takeOut
  Mannager.throwLinker
  Mannager.throwTaker
  Mannager.throw_replace
  Mannager.Env
  Mannager.MonadError{Mannager.throw}
  Mannager.MonadState{Mannager.lookfor Mannager.update}
  Mannager.StateError{Mannager.StateError runStateError}
module dependencies: AST
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      time-1.6.0.1@time-1.6.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  AST d605159f34e87c9680775e51b7a2b049
  exports: e579a6374870f831902124cda1fe098c
  Action d3804f4a2fcfae2aa4978ea98a445fd1
  All 23eb72ad362e0010d3ecdef4be6a49c3
  And cbcb7ac8203da8cbad58d2146c963eef
  BFalse 24f6bc6ee87a9a10068e080420067715
  BTrue 92741f232ecd3c53cf64f76b4959affa
  BoolExp 5b3de983c89fb94b72cf26921044c293
  Character 45f5edc128eb6aece66bf1e2a65dbb22
  Comm 19030a3d3a16c9bb862ed578d66e7107
  Coms 6062f63ef3c691190af3ea9a7d79b418
  ConMod 59fc9875a4e56760f9faf95d6d626d32
  Con_Modifiers 6881985b66d3784341483c6e88e555ae
  Const b44452847abf94f62ce34c31abfd71a9
  D10 35372e19831577fd6d8980e974ff8237
  D100 b887710f34da0dfea50c4612db4b430f
  D12 3f5a2db3446f02f977ebcc7e0b0f08c3
  D20 7d957c7de08698d8766f230829866add
  D3 59b6c5224acd76d78e0c1c103bbf4128
  D4 c58bfaa70dbee2de74ff05d43413a29f
  D6 ac8a90046b5ebe3472916b21e655f722
  D8 452cb9258925356dede89b37585e314c
  DepAtr fac92ff0fd87e3618c154eae3a15dbd8
  DepAttribute b93f1fad9f12c17b4860bf994b987aae
  DepSys fc4cb4f2883d912dfc7395622fbe26f5
  Dice aaf6c224b76bf03d536cbaf4862c8403
  Div eb4e99c9238cbfda7d780b4468038e76
  Eq e1e37a88fe7dc1635ffb5c4d4fd5a158
  Gt a3455e860dc1adb2572665acaec081f9
  IntExp 5b3de983c89fb94b72cf26921044c293
  Let 6f2c979a23b81573a518b4514518dc71
  Lt ecdd404f6927ea5c97583af2d5757450
  Minus 72e2e3d06a441d5d5e62d7e5c9104ca7
  Name 412a0cbdf0d605951c9a4b7594e7e936
  Not 026c85cde4d9d34a78de02f5c036c7e6
  Num 70aca6b6739083a1ea9a8496fb73d803
  Or df079d8f4e324322b7e41592e687cc44
  PC 7c823e5d53c614cb20a1f5b8cfe6769d
  Plus 70462ddbf00ea172927a98a184010bcf
  Pool 12ee81aa36c1c5437ae15ce38f3cfe40
  Qmark a8fcab73159a5c27d7dd05e986e76d12
  Skill c820151ac35457ec3fa5c7ef0d288584
  Skills 75d29fd57116e502fbd25cafdc59c879
  Sys 84eb4a52c3f941407f76995bb883844c
  System 7dadbf952eaaa51839dcd5b72dc1cd40
  Throws 099105db1509e064115c4a95dd26cacc
  ThrowsGen e93310021b2615a8d6cd509ac59e4852
  Times aabca98711c25fa8f9da7f6fc15bb065
  TrwGen 7764e6112322cc50b5c8377181d8a306
  UAct 501bee6c487b4adbf175b39d37fd6a73
  UMinus 95650ae36d761f5c1d51b93fc348e81d
  Var 71dce7e91c5e0084574de69e4e2ef8ad
  Variable 5932e4235b702c432223d7ab2f47999f
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog:System.Random b21db0c0ea43dc1ad218556cd0b064c7
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError :: GHC.Base.Applicative Mannager.StateError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Mannager.StateError
                  Mannager.$fFunctorStateError
                  Mannager.$fApplicativeStateError_$creturn
                  Mannager.$fApplicativeStateError_$c<*>
                  Mannager.$fApplicativeStateError_$c*>
                  Mannager.$fApplicativeStateError_$c<* -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError1 ::
    Mannager.StateError a
    -> Mannager.StateError b
    -> Mannager.Env
    -> GHC.Base.Maybe (a, Mannager.Env)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Mannager.StateError a)
                   (eta1 :: Mannager.StateError b)
                   (eta2 :: Mannager.Env) ->
                 case eta `cast` (Mannager.N:StateError[0] <a>_R) eta2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (a, Mannager.Env)
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) v s' ->
                      case eta1 `cast` (Mannager.N:StateError[0] <b>_R) s' of wild2 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ (a, Mannager.Env)
                        GHC.Base.Just ds1
                        -> case ds1 of wild3 { (,) v1 s'1 ->
                           GHC.Base.Just @ (a, Mannager.Env) (v, s'1) } } } }) -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError2 ::
    Mannager.StateError a
    -> Mannager.StateError b
    -> Mannager.Env
    -> GHC.Base.Maybe (b, Mannager.Env)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Mannager.StateError a)
                   (eta1 :: Mannager.StateError b)
                   (eta2 :: Mannager.Env) ->
                 case eta `cast` (Mannager.N:StateError[0] <a>_R) eta2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, Mannager.Env)
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) v s' ->
                      case eta1 `cast` (Mannager.N:StateError[0] <b>_R) s' of wild2 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ (b, Mannager.Env)
                        GHC.Base.Just ds1
                        -> case ds1 of wild3 { (,) v1 s'1 -> wild2 } } } }) -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError3 ::
    Mannager.StateError (a -> b)
    -> Mannager.StateError a
    -> Mannager.Env
    -> GHC.Base.Maybe (b, Mannager.Env)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   (m1 :: Mannager.StateError (a -> b))
                   (m2 :: Mannager.StateError a)
                   (eta :: Mannager.Env) ->
                 case m1 `cast` (Mannager.N:StateError[0] <a -> b>_R) eta of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, Mannager.Env)
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) v s' ->
                      case m2 `cast` (Mannager.N:StateError[0] <a>_R) s' of wild2 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ (b, Mannager.Env)
                        GHC.Base.Just ds1
                        -> case ds1 of wild3 { (,) v1 s'1 ->
                           GHC.Base.Just @ (b, Mannager.Env) (v v1, s'1) } } } }) -}
2a293e48ca370dd848d51a5e8b137a16
  $fApplicativeStateError4 ::
    a -> Mannager.Env -> GHC.Base.Maybe (a, Mannager.Env)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x :: a) (s :: Mannager.Env) ->
                 GHC.Base.Just @ (a, Mannager.Env) (x, s)) -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError_$c*> ::
    Mannager.StateError a
    -> Mannager.StateError b -> Mannager.StateError b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fApplicativeStateError2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Mannager.StateError a>_R
                 ->_R <Mannager.StateError b>_R
                 ->_R Sym (Mannager.N:StateError[0] <b>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError_$c<* ::
    Mannager.StateError a
    -> Mannager.StateError b -> Mannager.StateError a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fApplicativeStateError1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Mannager.StateError a>_R
                 ->_R <Mannager.StateError b>_R
                 ->_R Sym (Mannager.N:StateError[0] <a>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError_$c<*> ::
    Mannager.StateError (a -> b)
    -> Mannager.StateError a -> Mannager.StateError b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fApplicativeStateError3
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Mannager.StateError (a -> b)>_R
                 ->_R <Mannager.StateError a>_R
                 ->_R Sym (Mannager.N:StateError[0] <b>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fApplicativeStateError_$creturn :: a -> Mannager.StateError a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fApplicativeStateError4
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R ->_R Sym (Mannager.N:StateError[0] <a>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fFunctorStateError :: GHC.Base.Functor Mannager.StateError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Mannager.StateError
                  Mannager.$fFunctorStateError_$cfmap
                  Mannager.$fFunctorStateError_$c<$ -}
dff52a44b1a889c10d2764773c8663a8
  $fFunctorStateError1 ::
    a
    -> Mannager.StateError b
    -> Mannager.Env
    -> GHC.Base.Maybe (a, Mannager.Env)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Mannager.StateError b)
                   (eta2 :: Mannager.Env) ->
                 case eta1 `cast` (Mannager.N:StateError[0] <b>_R) eta2 of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (a, Mannager.Env)
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) v s' ->
                      GHC.Base.Just @ (a, Mannager.Env) (eta, s') } }) -}
dff52a44b1a889c10d2764773c8663a8
  $fFunctorStateError2 ::
    (a -> b)
    -> Mannager.StateError a
    -> Mannager.Env
    -> GHC.Base.Maybe (b, Mannager.Env)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f :: a -> b)
                   (m1 :: Mannager.StateError a)
                   (s :: Mannager.Env) ->
                 case m1 `cast` (Mannager.N:StateError[0] <a>_R) s of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, Mannager.Env)
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) v s' ->
                      GHC.Base.Just @ (b, Mannager.Env) (f v, s') } }) -}
dff52a44b1a889c10d2764773c8663a8
  $fFunctorStateError_$c<$ ::
    a -> Mannager.StateError b -> Mannager.StateError a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fFunctorStateError1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Mannager.StateError b>_R
                 ->_R Sym (Mannager.N:StateError[0] <a>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fFunctorStateError_$cfmap ::
    (a -> b) -> Mannager.StateError a -> Mannager.StateError b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a @ b -> Mannager.$fFunctorStateError2 @ b @ a)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R <Mannager.StateError a>_R
                 ->_R Sym (Mannager.N:StateError[0] <b>_R)) -}
3e0d1993ccfd901f90b9d5a12bbf5da3
  $fMonadErrorStateError :: Mannager.MonadError Mannager.StateError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Mannager.StateError
                  Mannager.$fMonadStateError
                  Mannager.$fMonadErrorStateError_$cthrow -}
6c9605771b0773c2863e069c7cc84763
  $fMonadErrorStateError1 ::
    Mannager.Env -> GHC.Base.Maybe (a, Mannager.Env)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Mannager.Env) ->
                 GHC.Base.Nothing @ (a, Mannager.Env)) -}
352cdf11067c1dfec781b5050a97fc08
  $fMonadErrorStateError_$cthrow :: Mannager.StateError a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fMonadErrorStateError1
                  `cast`
                (forall (a :: <*>_N). Sym (Mannager.N:StateError[0] <a>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fMonadStateError :: GHC.Base.Monad Mannager.StateError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Mannager.StateError
                  Mannager.$fMonadStateError_$cp1Monad
                  Mannager.$fMonadStateError_$c>>=
                  Mannager.$fMonadStateError_$c>>
                  Mannager.$fApplicativeStateError_$creturn
                  Mannager.$fMonadStateError_$s$dmfail -}
dff52a44b1a889c10d2764773c8663a8
  $fMonadStateError1 ::
    Mannager.StateError a
    -> (a -> Mannager.StateError b)
    -> Mannager.Env
    -> GHC.Base.Maybe (b, Mannager.Env)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (m :: Mannager.StateError a)
                   (f :: a -> Mannager.StateError b)
                   (s :: Mannager.Env) ->
                 case m `cast` (Mannager.N:StateError[0] <a>_R) s of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (b, Mannager.Env)
                   GHC.Base.Just ds
                   -> case ds of wild1 { (,) v s' ->
                      (f v) `cast` (Mannager.N:StateError[0] <b>_R) s' } }) -}
dff52a44b1a889c10d2764773c8663a8
  $fMonadStateError_$c>> ::
    Mannager.StateError a
    -> Mannager.StateError b -> Mannager.StateError b
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Mannager.StateError a)
                   (k :: Mannager.StateError b)
                   (eta :: Mannager.Env) ->
                 (Mannager.$fMonadStateError_$c>>= @ a @ b m1 (\ (ds :: a) -> k))
                   `cast`
                 (Mannager.N:StateError[0] <b>_R)
                   eta)
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Mannager.StateError a>_R
                 ->_R <Mannager.StateError b>_R
                 ->_R Sym (Mannager.N:StateError[0] <b>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fMonadStateError_$c>>= ::
    Mannager.StateError a
    -> (a -> Mannager.StateError b) -> Mannager.StateError b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fMonadStateError1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Mannager.StateError a>_R
                 ->_R <a -> Mannager.StateError b>_R
                 ->_R Sym (Mannager.N:StateError[0] <b>_R)) -}
dff52a44b1a889c10d2764773c8663a8
  $fMonadStateError_$cp1Monad ::
    GHC.Base.Applicative Mannager.StateError
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fApplicativeStateError -}
dff52a44b1a889c10d2764773c8663a8
  $fMonadStateError_$s$dmfail ::
    GHC.Base.String -> Mannager.StateError a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (-1, True, True)
                (\ @ a (s :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.PtrRepLifted
                   @ (Mannager.StateError a)
                   s) -}
b193f418f89f0153212876b78f426d8c
  $fMonadStateStateError :: Mannager.MonadState Mannager.StateError
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Mannager.StateError
                  Mannager.$fMonadStateError
                  Mannager.$fMonadStateStateError_$clookfor
                  Mannager.$fMonadStateStateError_$cupdate -}
60cd62f5cbb05ea5af61fb4badcce9dc
  $fMonadStateStateError1 ::
    AST.Variable
    -> GHC.Integer.Type.Integer
    -> Mannager.Env
    -> GHC.Base.Maybe ((), [(AST.Variable, GHC.Integer.Type.Integer)])
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>m2,
     Unfolding: InlineRule (3, True, False)
                (\ (v :: AST.Variable)
                   (i :: GHC.Integer.Type.Integer)
                   (s :: Mannager.Env) ->
                 GHC.Base.Just
                   @ ((), [(AST.Variable, GHC.Integer.Type.Integer)])
                   (GHC.Tuple.(), Mannager.$fMonadStateStateError_update' v i s)) -}
030e9bac63995d82236bb6634a955a7b
  $fMonadStateStateError2 ::
    AST.Variable
    -> Mannager.Env
    -> GHC.Base.Maybe (GHC.Integer.Type.Integer, Mannager.Env)
  {- Arity: 2, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (v :: AST.Variable) (s :: Mannager.Env) ->
                 GHC.Base.Just
                   @ (GHC.Integer.Type.Integer, Mannager.Env)
                   (Mannager.$fMonadStateStateError_lookfor' v s, s)) -}
4f451c432fafe4f2e1b3edf7b2334697
  $fMonadStateStateError_$clookfor ::
    AST.Variable -> Mannager.StateError GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fMonadStateStateError2
                  `cast`
                (<AST.Variable>_R
                 ->_R Sym (Mannager.N:StateError[0]
                               <GHC.Integer.Type.Integer>_R)) -}
797b9f02da44ab4e18eda1328e7f5de8
  $fMonadStateStateError_$cupdate ::
    AST.Variable -> GHC.Integer.Type.Integer -> Mannager.StateError ()
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Mannager.$fMonadStateStateError1
                  `cast`
                (<AST.Variable>_R
                 ->_R <GHC.Integer.Type.Integer>_R
                 ->_R Sym (Mannager.N:StateError[0] <()>_R)) -}
22f6ad9e65c7999ad0165934802b8606
  $fMonadStateStateError_lookfor' ::
    AST.Variable
    -> [(AST.Variable, GHC.Integer.Type.Integer)]
    -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
0677c3600867227d0e47de4f680e0de9
  $fMonadStateStateError_update' ::
    AST.Variable
    -> GHC.Integer.Type.Integer
    -> [(AST.Variable, GHC.Integer.Type.Integer)]
    -> [(AST.Variable, GHC.Integer.Type.Integer)]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: AST.Variable)
                   (w1 :: GHC.Integer.Type.Integer)
                   (w2 :: [(AST.Variable, GHC.Integer.Type.Integer)]) ->
                 case Mannager.$wupdate' w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (AST.Variable, GHC.Integer.Type.Integer)
                   ww1
                   ww2 }) -}
f3b326351754405f174ce440a0fc8463
  $tc'C:MonadError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13086240755716254597##
                   11391986778270054673##
                   Mannager.$trModule
                   Mannager.$tc'C:MonadError1) -}
3b6afc6e3a410f598dd50f1dfb92a656
  $tc'C:MonadError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MonadError"#) -}
450d19cab32edeed509c43dac1a96b94
  $tc'C:MonadState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3954783070903054211##
                   10291128280165785890##
                   Mannager.$trModule
                   Mannager.$tc'C:MonadState1) -}
33f6de6b806870e5cae8cfe81cf1e401
  $tc'C:MonadState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:MonadState"#) -}
ffc9a28bf03e48a76ea0bdb18000d6be
  $tc'StateError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16567084299996846020##
                   10463894845861211622##
                   Mannager.$trModule
                   Mannager.$tc'StateError1) -}
4de886a5ec26d9e57c587a30495fb595
  $tc'StateError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StateError"#) -}
f4b9789517c2deaea558bf35c4955697
  $tcMonadError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3448587503688379897##
                   13899187581766466063##
                   Mannager.$trModule
                   Mannager.$tcMonadError1) -}
1aa7760c816f784c1b11e991b9e12630
  $tcMonadError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MonadError"#) -}
dcb19440a8fb04d5f67e760831e83889
  $tcMonadState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13791921072288934577##
                   18383202945197981422##
                   Mannager.$trModule
                   Mannager.$tcMonadState1) -}
4f444f6f9893aa68f4863494e659609e
  $tcMonadState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MonadState"#) -}
40f2c553f602997c27a3df8713dd6004
  $tcStateError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14012536653397414744##
                   15086680042522695223##
                   Mannager.$trModule
                   Mannager.$tcStateError1) -}
0c629899946c4156e6e28518586210b6
  $tcStateError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StateError"#) -}
99df815aa31d8e33b1dbd0f6f1b55867
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Mannager.$trModule2
                   Mannager.$trModule1) -}
6428c62ab66a08761dbfcd3533660bd1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Mannager"#) -}
d732ae5bac4b85fd642b1639d1e635d8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "GoblinBurner-0.1.0.0-I1JAjz4cEJL8vh9rdrHCnV"#) -}
f0deafc46de292d36580d99561d070ff
  $wcharacterListModify ::
    AST.System
    -> [AST.Character]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# AST.Character, [AST.Character] #)
  {- Arity: 5, Strictness: <L,1*U><S,1*U><S,U><L,U><L,U>,
     Inline: [0] -}
5fd966af8278399d0556ef23981c2d53
  $wconModCheck ::
    AST.Name
    -> [(AST.Name, GHC.Integer.Type.Integer)]
    -> [GHC.Base.String]
    -> [AST.Con_Modifiers]
    -> (# AST.Name, [(AST.Name, GHC.Integer.Type.Integer)],
          [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
006e8c1b312fa32521264aa2c896e78c
  $wdices_thrower ::
    AST.IntExp
    -> AST.Dice
    -> GHC.Base.Maybe AST.Throws
    -> Mannager.Env
    -> (# [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
          GHC.Integer.Type.Integer #)
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: AST.IntExp)
                   (ww1 :: AST.Dice)
                   (ww2 :: GHC.Base.Maybe AST.Throws)
                   (w :: Mannager.Env) ->
                 case ww2 of wild {
                   GHC.Base.Nothing
                   -> case Mannager.dices_thrower2
                      ret_ty (# [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
                                GHC.Integer.Type.Integer #)
                      of {}
                   GHC.Base.Just thr
                   -> case (Mannager.dices_thrower_$sevalIntExp ww)
                             `cast`
                           (Mannager.N:StateError[0] <GHC.Integer.Type.Integer>_R)
                             w of wild1 {
                        GHC.Base.Nothing
                        -> case Mannager.dices_thrower1
                           ret_ty (# [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
                                     GHC.Integer.Type.Integer #)
                           of {}
                        GHC.Base.Just a
                        -> Mannager.$wroll
                             (Mannager.diceToNum ww1)
                             thr
                             (Data.Tuple.fst
                                @ GHC.Integer.Type.Integer
                                @ Mannager.Env
                                a) } }) -}
3cf6f471978e1dc4f52571512a230aa0
  $wenvModify ::
    Mannager.Env
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> (# (AST.Variable, GHC.Integer.Type.Integer),
          [(AST.Variable, GHC.Integer.Type.Integer)] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>, Inline: [0] -}
65f9958832fa2656698bb5a28059f6c5
  $wlookAndReplace ::
    AST.Action
    -> AST.Throws
    -> [(AST.Name, AST.Throws)]
    -> (# AST.Action, [(AST.Name, AST.Throws)] #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U,U,U,A)><L,U><S,1*U>, Inline: [0] -}
a154f4e6089d41fa292909977f499df4
  $wroll ::
    GHC.Integer.Type.Integer
    -> AST.Throws
    -> GHC.Integer.Type.Integer
    -> (# [GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
          GHC.Integer.Type.Integer #)
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>, Inline: [0] -}
2e266e7cf39b774de5dbf6ca88f431e8
  $wupdate' ::
    AST.Variable
    -> GHC.Integer.Type.Integer
    -> [(AST.Variable, GHC.Integer.Type.Integer)]
    -> (# (AST.Variable, GHC.Integer.Type.Integer),
          [(AST.Variable, GHC.Integer.Type.Integer)] #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
889e7ed3d0dbb9b247ddec7c706e9718
  type Env = [(AST.Variable, GHC.Integer.Type.Integer)]
3e0d1993ccfd901f90b9d5a12bbf5da3
  class GHC.Base.Monad m => MonadError (m :: * -> *) where
    throw :: m a
    {-# MINIMAL throw #-}
b193f418f89f0153212876b78f426d8c
  class GHC.Base.Monad m => MonadState (m :: * -> *) where
    lookfor :: AST.Variable -> m GHC.Integer.Type.Integer
    update :: AST.Variable -> GHC.Integer.Type.Integer -> m ()
    {-# MINIMAL lookfor, update #-}
dff52a44b1a889c10d2764773c8663a8
  newtype StateError a
    = StateError {runStateError :: Mannager.Env
                                   -> GHC.Base.Maybe (a, Mannager.Env)}
4c93cdb4170fae7d372fce408acf2339
  aleatory_dice ::
    GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (dice :: GHC.Integer.Type.Integer) ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Integer.Type.Integer
                        (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.noDuplicate# s of s' { DEFAULT ->
                         case System.Random.theStdGen
                                `cast`
                              (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                         case GHC.Prim.atomicModifyMutVar#
                                @ GHC.Prim.RealWorld
                                @ System.Random.StdGen
                                @ (System.Random.StdGen, GHC.Integer.Type.Integer)
                                @ GHC.Integer.Type.Integer
                                r#
                                (\ (a1 :: System.Random.StdGen) ->
                                 case System.Random.$w$srandomIvalInteger
                                        @ GHC.Integer.Type.Integer
                                        GHC.Num.$fNumInteger
                                        Mannager.aleatory_dice1
                                        dice
                                        a1 of ww3 { (#,#) ww4 ww5 ->
                                 case ww5 of a'1 { System.Random.StdGen ipv ipv1 -> (a'1, ww4) } })
                                s' of ds1 { (#,#) ipv ipv1 ->
                         case ipv1 of b1 { DEFAULT -> ds1 } } } }) of ds { (#,#) ipv ipv1 ->
                 ipv1 }) -}
00769b0ac06395afa083e816b2313fa4
  aleatory_dice1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
6df5a5cf52e3509d0d79e4b4042c0d90
  characterListModify ::
    AST.System
    -> [AST.Character]
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> [AST.Character]
  {- Arity: 5, Strictness: <L,1*U><S,1*U><S,U><L,U><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: AST.System)
                   (w1 :: [AST.Character])
                   (w2 :: GHC.Integer.Type.Integer)
                   (w3 :: GHC.Integer.Type.Integer)
                   (w4 :: GHC.Integer.Type.Integer) ->
                 case Mannager.$wcharacterListModify
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ AST.Character ww1 ww2 }) -}
0858e853074ce927b5811e54c7b72486
  characterModify ::
    AST.Character
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> AST.Character
  {- Arity: 3, Strictness: <S,1*U(U,1*U,U)><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: AST.Character)
                   (newNum :: GHC.Integer.Type.Integer)
                   (n :: GHC.Integer.Type.Integer) ->
                 case ds of wild { AST.PC name xs st ->
                 AST.PC name (Mannager.envModify xs newNum n) st }) -}
37f442b8e8f3fbc891ce20b285dee511
  character_creation ::
    AST.Name
    -> Mannager.Env
    -> [AST.DepAttribute]
    -> [AST.Skills]
    -> AST.Character
  {- Arity: 4, Strictness: <L,U><L,U><L,1*U><L,1*U>m,
     Unfolding: InlineRule (4, True, False)
                (\ (name :: AST.Name)
                   (xs :: Mannager.Env)
                   (depAttr :: [AST.DepAttribute])
                   (skl :: [AST.Skills]) ->
                 AST.PC
                   name
                   (Mannager.depAttrCalculator
                      (Mannager.skillCalculator xs skl)
                      depAttr)
                   (GHC.Types.[] @ GHC.Base.String)) -}
3bc22aa0f41e82b7b6a1aaa572b19934
  commGenerator ::
    Mannager.Env -> [GHC.Base.String] -> AST.Comm -> [AST.Comm]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
15f82846759f051c1d863e16106fe44e
  conModCheck ::
    AST.Character -> [AST.Con_Modifiers] -> AST.Character
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AST.Character) (w1 :: [AST.Con_Modifiers]) ->
                 case w of ww { AST.PC ww1 ww2 ww3 ->
                 case Mannager.$wconModCheck
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 AST.PC ww5 ww6 ww7 } }) -}
7a7a3bee4c4a71587ad1751df241ca72
  depAttrCalculator ::
    Mannager.Env -> [AST.DepAttribute] -> Mannager.Env
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
c6c7697492cd55285de2a7c1a5408b59
  diceToNum :: AST.Dice -> GHC.Integer.Type.Integer
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AST.Dice) ->
                 case ds of wild {
                   AST.D100 -> Mannager.diceToNum8
                   AST.D20 -> Mannager.diceToNum7
                   AST.D12 -> Mannager.diceToNum6
                   AST.D10 -> Mannager.diceToNum5
                   AST.D8 -> Mannager.diceToNum4
                   AST.D6 -> Mannager.diceToNum3
                   AST.D4 -> Mannager.diceToNum2
                   AST.D3 -> Mannager.diceToNum1 }) -}
5fd8bbce3aeb8196b46aecae8958b4fc
  diceToNum1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
dd90bdb5405dc7af3c3df686215b037e
  diceToNum2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
0ef77eed6e01a006b8e6820852a8516f
  diceToNum3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
1030f511e804856721274988a0d3a4a7
  diceToNum4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8) -}
07a46acc6ca274498a80b4dc35bf684d
  diceToNum5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (10) -}
94c86e64439a5f3c53295594ef812951
  diceToNum6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (12) -}
b1362e62ff04d42dd4cde47a4708db0c
  diceToNum7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (20) -}
535da60ba008d77c5378272a2dce6e59
  diceToNum8 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (100) -}
1d12f81ae326d90b7b064e54d9ed4503
  dices_thrower ::
    AST.Action
    -> Mannager.Env
    -> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
        GHC.Integer.Type.Integer)
  {- Arity: 2, Strictness: <S(LSLS),1*U(A,1*U,1*U,1*U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AST.Action) (w1 :: Mannager.Env) ->
                 case w of ww { AST.UAct ww1 ww2 ww3 ww4 ->
                 case Mannager.$wdices_thrower
                        ww2
                        ww3
                        ww4
                        w1 of ww5 { (#,,#) ww6 ww7 ww8 ->
                 (ww6, ww7, ww8) } }) -}
6b15ca78abbaf1628c2f97b75a232438
  dices_thrower1 ::
    ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
     GHC.Integer.Type.Integer)
  {- Strictness: x -}
75f9e0f7c5e4b888245af0726ea527e0
  dices_thrower2 ::
    ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
     GHC.Integer.Type.Integer)
  {- Strictness: x -}
786ab8be8a7e68be3f13fc9a689789eb
  dices_thrower_$sevalIntExp ::
    AST.IntExp -> Mannager.StateError GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
8d0c051a69f5014109407f5f92a33808
  envModify ::
    Mannager.Env
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Mannager.Env
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Mannager.Env)
                   (w1 :: GHC.Integer.Type.Integer)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case Mannager.$wenvModify w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.:
                   @ (AST.Variable, GHC.Integer.Type.Integer)
                   ww1
                   ww2 }) -}
bf7d3e97c4196daace5b22530c71307f
  evalBoolExp ::
    (Mannager.MonadState m, Mannager.MonadError m) =>
    AST.BoolExp -> m GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(SLL),U(U(U,U,U,U,U),C(U),A)><L,U(A,U)><S,1*U> -}
de91809c2509e825caa663aa4486f20f
  evalBoolExp_$sevalBoolExp ::
    AST.BoolExp -> Mannager.StateError GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
78db6474921e1e87fafa741dfd43b2a9
  evalComm ::
    (Mannager.MonadState m, Mannager.MonadError m) => AST.Comm -> m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U,U,U,U,U),C(U),C(C1(U)))><L,U(A,U)><S,1*U>,
     Unfolding: (\ @ (m :: * -> *)
                   ($dMonadState :: Mannager.MonadState m)
                   ($dMonadError :: Mannager.MonadError m)
                   (eta :: AST.Comm) ->
                 case eta of wild {
                   AST.Skip -> Mannager.evalComm2 @ m
                   AST.Let v n
                   -> GHC.Base.>>=
                        @ m
                        (Mannager.$p1MonadState @ m $dMonadState)
                        @ GHC.Integer.Type.Integer
                        @ ()
                        (Mannager.evalIntExp @ m $dMonadState $dMonadError n)
                        (\ (m1 :: GHC.Integer.Type.Integer) ->
                         Mannager.update @ m $dMonadState v m1) }) -}
dfe5a5effe3cb45ea9fb31162abaf01a
  evalComm2 :: m ()
  {- Strictness: x -}
e230d6674b786d9ccc18f8f76e906cd0
  evalIntExp ::
    (Mannager.MonadState m, Mannager.MonadError m) =>
    AST.IntExp -> m GHC.Integer.Type.Integer
  {- Arity: 3,
     Strictness: <S,U(U(U,U,U,U,U),C(U),A)><L,U(A,U)><S,1*U> -}
6a71a4db8d92a1fe3f9615791256230c
  initState :: Mannager.Env
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (GHC.Types.[] @ (AST.Variable, GHC.Integer.Type.Integer)) -}
fb1314412fa61fd064f480469b1324d3
  isIn :: GHC.Base.String -> [GHC.Base.String] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
2eb852c2983d5494fc620252b717cacc
  length' :: [a] -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U> -}
be0534ea19dc1c050fdbec8cd050b182
  lookAndReplace ::
    AST.Action
    -> AST.Throws
    -> [(AST.Name, AST.Throws)]
    -> (AST.Action, [(AST.Name, AST.Throws)])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U,U,U,A)><L,U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: AST.Action)
                   (w1 :: AST.Throws)
                   (w2 :: [(AST.Name, AST.Throws)]) ->
                 case Mannager.$wlookAndReplace w w1 w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
14a675109289afd0d7202104610cf2c1
  modifiers :: AST.System -> [AST.Con_Modifiers]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AST.System) ->
                 case ds of wild {
                   DEFAULT -> Mannager.modifiers1
                   AST.DepSys ds1 ds2 ds3 ds4 xs ds5 -> xs }) -}
03f3cf45bb325da30a14caff270353dd
  modifiers1 :: [AST.Con_Modifiers]
  {- Strictness: x -}
16d530877fbc128b74793a9ed756cc20
  modifiersExecute :: Mannager.Env -> [AST.Comm] -> Mannager.Env
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
d44d2d3b1c7f91e4aaad2aa1f7c469f9
  nth :: GHC.Integer.Type.Integer -> [a] -> a
  {- Arity: 2, Strictness: <L,U><S,U> -}
8d13774f34720af6a58949e97ed65edd
  replaceAllComm :: AST.Variable -> AST.Comm -> AST.Comm
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: AST.Variable) (w1 :: AST.Comm) ->
                 case w1 of wild {
                   AST.Skip -> Mannager.replaceAllComm2
                   AST.Let x e
                   -> case GHC.Base.eqString x Mannager.replaceAllComm1 of wild1 {
                        GHC.Types.False -> AST.Let x e
                        GHC.Types.True -> AST.Let w (Mannager.replaceAllInt w e) } }) -}
37378f5e92c52d781e2d8294515c512d
  replaceAllComm1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "All"#) -}
fbf1f85d5b708f825cdafea99c1f3afe
  replaceAllComm2 :: AST.Comm
  {- Strictness: x -}
77f3dede81d92814a2463efe22b6c027
  replaceAllInt :: AST.Variable -> AST.IntExp -> AST.IntExp
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
ae94bf257fd1c91f0ffecb4c856f0296
  replaceAllbool :: AST.Variable -> AST.BoolExp -> AST.BoolExp
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
fd03dcc1bef304cadfaf3b5af9d5cbe1
  roll ::
    GHC.Integer.Type.Integer
    -> AST.Throws
    -> GHC.Integer.Type.Integer
    -> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Integer.Type.Integer)
                   (w1 :: AST.Throws)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case Mannager.$wroll w w1 w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
d0503608c0de1d0d38ca8a0849890519
  runStateError ::
    Mannager.StateError a
    -> Mannager.Env -> GHC.Base.Maybe (a, Mannager.Env)
  RecSel Left Mannager.StateError
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Mannager.runStateError1
                  `cast`
                (forall (a :: <*>_N).
                 <Mannager.StateError a>_R ->_R Mannager.N:StateError[0] <a>_R) -}
c390f3be2b03515172b34ca756c043c6
  runStateError1 :: Mannager.StateError a -> Mannager.StateError a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a (ds :: Mannager.StateError a) -> ds) -}
9876b82965e8329223b4f06755f0fa7b
  skilatr_thrower ::
    AST.Character
    -> GHC.Integer.Type.Integer
    -> AST.ThrowsGen
    -> ([GHC.Integer.Type.Integer], [GHC.Integer.Type.Integer],
        GHC.Integer.Type.Integer)
  {- Arity: 3, Strictness: <S,1*U(A,U,A)><L,U><S(SL),1*U(1*U,1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: AST.Character)
                   (w1 :: GHC.Integer.Type.Integer)
                   (w2 :: AST.ThrowsGen) ->
                 case w of ww { AST.PC ww1 ww2 ww3 ->
                 case w2 of ww4 { AST.TrwGen ww5 ww6 ->
                 case Mannager.$wroll
                        (Mannager.diceToNum ww6)
                        ww5
                        (case Mannager.nth
                                @ (AST.Name, GHC.Integer.Type.Integer)
                                w1
                                ww2 of wild { (,) ds1 y ->
                         y }) of ww7 { (#,,#) ww8 ww9 ww10 ->
                 (ww8, ww9, ww10) } } }) -}
a311b482fe491fc8d02bbfa1e36a7b32
  skillCalculator :: Mannager.Env -> [AST.Skills] -> Mannager.Env
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
15df3aa675a9971a2b9cec796bad1f00
  system_depurator :: AST.System -> AST.System
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: AST.System) ->
                 case w of wild {
                   DEFAULT -> Mannager.system_depurator1
                   AST.Sys act attr depAttr skl genThrows action_thw conModif
                   -> AST.DepSys
                        (Mannager.throwLinker
                           act
                           (case genThrows of wild1 { AST.TrwGen t ds -> t })
                           action_thw)
                        attr
                        (GHC.List.reverse @ AST.DepAttribute depAttr)
                        skl
                        conModif
                        genThrows }) -}
a4e7dbded56387e3e37bf520b8011b3c
  system_depurator1 :: AST.System
  {- Strictness: x -}
c118a59855d8eb6a8e7ca8156d8ba7ab
  takeOut :: GHC.Integer.Type.Integer -> [a] -> [a]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
56adc797ee7439316d5e92b8d9b1e89b
  throwLinker ::
    [AST.Action]
    -> AST.Throws -> [(AST.Name, AST.Throws)] -> [AST.Action]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,1*U> -}
083a393e332e2d970f2471d1d4ba4e52
  throwTaker :: AST.ThrowsGen -> AST.Throws
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: AST.ThrowsGen) ->
                 case ds of wild { AST.TrwGen t ds1 -> t }) -}
3d476a96ac3fc07a894a51586b672e38
  throw_replace :: AST.Action -> AST.Throws -> AST.Action
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U,U,U,A)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: AST.Action) (thr :: AST.Throws) ->
                 case ds of wild { AST.UAct name expr dice ds1 ->
                 AST.UAct name expr dice (GHC.Base.Just @ AST.Throws thr) }) -}
instance GHC.Base.Applicative [Mannager.StateError]
  = Mannager.$fApplicativeStateError
instance GHC.Base.Functor [Mannager.StateError]
  = Mannager.$fFunctorStateError
instance Mannager.MonadError [Mannager.StateError]
  = Mannager.$fMonadErrorStateError
instance GHC.Base.Monad [Mannager.StateError]
  = Mannager.$fMonadStateError
instance Mannager.MonadState [Mannager.StateError]
  = Mannager.$fMonadStateStateError
"SPEC evalBoolExp @ StateError" [ALWAYS] forall ($dMonadError :: Mannager.MonadError
                                                                   Mannager.StateError)
                                                ($dMonadState :: Mannager.MonadState
                                                                   Mannager.StateError)
  Mannager.evalBoolExp @ Mannager.StateError
                       $dMonadState
                       $dMonadError
  = Mannager.evalBoolExp_$sevalBoolExp
"SPEC evalIntExp @ StateError" [ALWAYS] forall ($dMonadError :: Mannager.MonadError
                                                                  Mannager.StateError)
                                               ($dMonadState :: Mannager.MonadState
                                                                  Mannager.StateError)
  Mannager.evalIntExp @ Mannager.StateError $dMonadState $dMonadError
  = Mannager.dices_thrower_$sevalIntExp
"SPEC/Mannager $dmfail @ StateError" [ALWAYS] forall ($dMonad :: GHC.Base.Monad
                                                                   Mannager.StateError)
  GHC.Base.$dmfail @ Mannager.StateError $dMonad
  = Mannager.$fMonadStateError_$s$dmfail
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

